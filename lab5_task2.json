{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                }
            ],
            "hash": "6cb3dfb2d5227bbaa23663245d7acd67eaa33d68",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "custom_list_enumerate",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "custom_list_enumerate_1",
                        "id": "2",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "custom_list_enumerate": {
                                "description": "Fetch a custom list and iterate through the rows, producing a dictionary output for each row with the row number and the value for each column.",
                                "fields": [
                                    {
                                        "dataTypes": [],
                                        "description": "the name or ID of a custom list",
                                        "inputType": "item",
                                        "label": "custom_list",
                                        "name": "custom_list",
                                        "placeholder": "my_custom_list",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "custom_list_enumerate",
                                "name": "custom_list_enumerate"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "custom_list_enumerate": {
                                "custom_list": "playbook_input:list_name"
                            }
                        }
                    },
                    "errors": {},
                    "id": "2",
                    "type": "utility",
                    "x": 980,
                    "y": 560
                },
                "3": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "custom_list_enumerate_1:custom_function_result.data",
                                        "value": "critical"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "3",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "decision",
                    "x": 1068,
                    "y": 730.5
                },
                "4": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "code_1",
                        "id": "4",
                        "inputParameters": [],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(\"the code was called\")\n",
                    "x": 1220,
                    "y": 900
                },
                "5": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "call_api_2",
                        "id": "5",
                        "type": "utility"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "utility",
                    "x": 760,
                    "y": 780
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [],
                "description": "enter the name of the search_peers list",
                "name": "list_name"
            }
        ],
        "output_spec": null,
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.0.84310"
    },
    "create_time": "2022-05-12T13:21:07.460188+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}